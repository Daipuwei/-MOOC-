Given a stack which can keep MM numbers at most. 
Push NN numbers in the order of 1, 2, 3, ..., 
NN and pop randomly. 
You are supposed to tell if a given sequence of 
numbers is a possible pop sequence of the stack. 
For example, if MM is 5 and NN is 7, 
we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, 
but not 3, 2, 1, 7, 5, 6, 4.

Input Specification:

Each input file contains one test case. 
For each case, the first line contains 3 numbers 
(all no more than 1000): MM (the maximum capacity of 
the stack), 
NN (the length of push sequence), 
and KK (the number of pop sequences to be checked). 
Then KK lines follow, each contains a pop sequence 
of NN numbers. All the numbers in a line are 
separated by a space.

Output Specification:

For each pop sequence, print in one line "YES" if it is indeed a possible pop sequence of the stack, or "NO" if not.

Sample Input:

5 7 5
1 2 3 4 5 6 7
3 2 1 7 5 6 4
7 6 5 4 3 2 1
5 6 4 3 7 2 1
1 7 6 5 4 3 2
Sample Output:

YES
NO
NO
YES
NO


#include <stdio.h>
#include <stdlib.h>

#define MaxSize 1001

typedef struct node{
	int top;
	int cap;
	int data[MaxSize];
} Stack;

Stack* CreateStack();
void Push(Stack *PtrS, int e);
void Pop(Stack *PtrS);
int CheckStack(int tmp[], int M, int N);

int main(int argc, char const *argv[])
{
	int M, N, K;//M (the maximum capacity of the stack), N (the length of push sequence), and K (the number of pop sequences to be checked). 
	scanf("%d %d %d", &M, &N, &K);
	int *tmp = (int*)malloc(sizeof(int)*N);
	for( ; K > 0; K--){
		for(int i = 0; i < N; i++){
			scanf("%d", tmp+i);
		}
		if(CheckStack(tmp, M, N))
			printf("YES\n");
		else
			printf("NO\n");
	}
	return 0;
}

Stack* CreateStack()
{
	Stack *PtrS = (Stack*)malloc(sizeof(Stack));
	PtrS->cap = MaxSize;
	PtrS->top = -1;
	return PtrS;
}

void Push(Stack *PtrS, int e)
{
	if(PtrS->top == PtrS->cap - 1)
		return;
	PtrS->top++;
	PtrS->data[PtrS->top] = e;
}

void Pop(Stack *PtrS)
{
	if(PtrS->top == -1)
		return;
	PtrS->top--;
}

int CheckStack(int tmp[], int M, int N)
{
	Stack *ps = CreateStack();
	Push(ps, 0);//让top指向data数组的第一个位置data[0]
	int idx = 0;
	int num = 1;
	while(idx < N){
		while(ps->data[ps->top] < tmp[idx] && idx < N && ps->top < M)
			Push(ps, num++);
		if(ps->data[ps->top] == tmp[idx]){
			Pop(ps);
			idx++;
		}
		else
			return 0;
	}
	return 1;
}
